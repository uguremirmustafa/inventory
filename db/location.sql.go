// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: location.sql

package db

import (
	"context"
)

const getLocation = `-- name: GetLocation :one
SELECT id, name, image_url, description, user_id, created_at, updated_at, deleted_at FROM location WHERE id = $1 LIMIT 1
`

func (q *Queries) GetLocation(ctx context.Context, id int64) (Location, error) {
	row := q.db.QueryRowContext(ctx, getLocation, id)
	var i Location
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ImageUrl,
		&i.Description,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const listLocationsOfUser = `-- name: ListLocationsOfUser :many
SELECT id, name, image_url, description, user_id, created_at, updated_at, deleted_at FROM location WHERE user_id = $1
`

func (q *Queries) ListLocationsOfUser(ctx context.Context, userID int64) ([]Location, error) {
	rows, err := q.db.QueryContext(ctx, listLocationsOfUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Location
	for rows.Next() {
		var i Location
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.ImageUrl,
			&i.Description,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
