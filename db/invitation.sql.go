// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: invitation.sql

package db

import (
	"context"
)

const createInvitation = `-- name: CreateInvitation :one
INSERT INTO invitations
(email, token, group_id, invitor_id)
VALUES ($1, $2, $3, $4)
RETURNING id, email, token, invitor_id, group_id, created_at
`

type CreateInvitationParams struct {
	Email     string `db:"email" json:"email"`
	Token     string `db:"token" json:"token"`
	GroupID   int64  `db:"group_id" json:"group_id"`
	InvitorID int64  `db:"invitor_id" json:"invitor_id"`
}

func (q *Queries) CreateInvitation(ctx context.Context, arg CreateInvitationParams) (Invitation, error) {
	row := q.db.QueryRowContext(ctx, createInvitation,
		arg.Email,
		arg.Token,
		arg.GroupID,
		arg.InvitorID,
	)
	var i Invitation
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Token,
		&i.InvitorID,
		&i.GroupID,
		&i.CreatedAt,
	)
	return i, err
}

const getInvitationByToken = `-- name: GetInvitationByToken :one
SELECT id, email, token, invitor_id, group_id, created_at FROM invitations
WHERE token = $1
LIMIT 1
`

func (q *Queries) GetInvitationByToken(ctx context.Context, token string) (Invitation, error) {
	row := q.db.QueryRowContext(ctx, getInvitationByToken, token)
	var i Invitation
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Token,
		&i.InvitorID,
		&i.GroupID,
		&i.CreatedAt,
	)
	return i, err
}
